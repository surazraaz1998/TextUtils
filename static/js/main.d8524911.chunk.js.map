{"version":3,"sources":["Alert.js","Navbar.js","TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","alert","className","type","role","msg","Navbar","mode","href","title","id","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","style","color","heading","value","backgroundColor","rows","onChange","event","target","newText","toUpperCase","showAlert","toLowerCase","split","map","word","charAt","slice","join","document","getElementById","select","navigator","clipboard","writeText","length","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.d8524911.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{props.alert.type}</strong> : {props.alert.msg}\r\n        </div>\r\n    ) \r\n}\r\nexport default Alert;\r\n","import React from 'react'\r\n\r\nfunction Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n            <div className=\"container-fluid\">\r\n                <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"/navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\r\n                <ul className=\"navbar-nav\">\r\n                    <li className=\"nav-item\">\r\n                    <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n                    </li>\r\n                </ul>\r\n                </div>\r\n            </div>\r\n            <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n                <input className=\"form-check-input\" type=\"checkbox\"  onClick={props.toggleMode} id=\"flexSwitchCheckDefault\"/>\r\n                <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\r\n            </div>\r\n            \r\n        </nav>\r\n    )\r\n}\r\nexport default Navbar;","import React, { useState } from 'react'\r\n\r\nfunction TextForm(props) {\r\n\r\n\r\n    const [text, setText] = useState('');\r\n\r\n    const handleOnChange=(event)=>{\r\n        setText(event.target.value);\r\n    }\r\n\r\n    const handleUpperCase=()=>{\r\n        let newText=text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to UpperCase\",\"success\");\r\n    }\r\n\r\n    const handleLowerCase=()=>{\r\n        let newText=text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to LowerCase\",\"success\");\r\n    }\r\n\r\n    const handleCamelCase=()=>{\r\n        setText(text.toLowerCase().split(' ').map(word=>\" \"+word.charAt(0).toUpperCase()+word.slice(1)).join(''));\r\n        props.showAlert(\"Converted to CamelCase\",\"success\");\r\n    }\r\n\r\n    const handleSpace=()=>{\r\n        let newText=text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\"Extra spaces removed\",\"success\");\r\n    }\r\n\r\n    const handleCopy=()=>{\r\n        let newText=document.getElementById(\"mybox\");\r\n        newText.select();\r\n        navigator.clipboard.writeText(newText.value);\r\n        props.showAlert(\"Copied to clipboard\",\"success\");\r\n    }\r\n\r\n    const handleClear=()=>{\r\n        setText('');\r\n        props.showAlert(\"Cleared everything\",\"success\");\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className=\"container mb-3 my-3\" style={{color:props.mode==='dark'?'white':'black'}}>\r\n                <h2>{props.heading}</h2>\r\n                <textarea className=\"form-control\" value={text} style={{backgroundColor: props.mode==='dark'?'grey':'white', color:props.mode==='dark'?'white':'black'}} id=\"mybox\" rows=\"8\" onChange={handleOnChange}></textarea>\r\n            </div>\r\n            <div className=\"container mb-3 my-3 \">\r\n                <button className=\"btn btn-primary mx-2\" onClick={handleUpperCase} >Convert to UpperCase</button>\r\n                <button className=\"btn btn-primary mx-2\" onClick={handleLowerCase}>Convert to LowerCase</button>\r\n                <button className=\"btn btn-primary mx-2\" onClick={handleCamelCase}>Convert to CamelCase</button>\r\n                <button className=\"btn btn-primary mx-2\" onClick={handleSpace}>Remove extra space</button>\r\n                <button className=\"btn btn-primary mx-2\" onClick={handleCopy}>Copy Text</button>\r\n                <button className=\"btn btn-primary mx-2\" onClick={handleClear}>Clear Text</button>\r\n            </div>\r\n            <div className=\"container\" style={{color:props.mode==='dark'?'white':'black'}}>\r\n                <h1>Your text summary</h1>\r\n                <p>{text.split(\" \").length} <strong>words</strong>  {text.length} <strong>characters</strong></p>\r\n                <p>{0.008*text.length} <strong>Minutes to read.</strong></p>\r\n                <h2>Preview</h2>\r\n                <p>{text.length>0?text:\"Enter text to Preview\"}</p>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TextForm;\r\n\r\n\r\n\r\n","import { useState } from 'react';\nimport Alert from './Alert';\nimport Navbar from './Navbar';\nimport TextForm from './TextForm';\n\nfunction App() {\n  const [mode, setMode] = useState('light')\n  const [alert, setAlert] = useState(null);\n\n  const showAlert=(message,type)=>{\n    setAlert({\n      msg: message,\n      type:type\n    })\n    setTimeout(() => {\n      setAlert(null)\n    }, 1500);\n  }\n\n\n  const toggleMode=()=>{\n    if(mode==='light'){\n      setMode('dark');\n      document.body.style.backgroundColor='#042743';\n      showAlert(\"Dark Mode has been enable\",\"success\");\n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor='white';\n      showAlert(\"Light Mode has been enable\",\"success\");\n    }\n  } \n\n\n  return (\n    <>\n\n      <Navbar title=\"Text Utils\" mode={mode} toggleMode={toggleMode}/>\n      <Alert alert={alert} />\n      <TextForm heading=\"Enter the text here to analyze\" showAlert={showAlert} mode={mode} />  \n    </>\n  ); \n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}